# Methods added to this helper will be available to all templates in the application.
module ApplicationHelper

  def draw_polygons(page, polygons)
    for polygon in polygons
      if page
        page << @map.add_overlay(GPolygon.new(polygon, "#ff0000", 5, 0.3, "#00ff00", 0.1))
      else
        @map.overlay_init(GPolygon.new(polygon, "#ff0000", 5, 0.3, "#00ff00", 0.1))
      end
    end
  end

  def get_gscale_range
    # find the proper scale (that two points are within the map window)
    # generated by gmap_boundary_by_zoom_level (application.rb)
    @gpoint2scale={}
    @gpoint2scale[0] = [179.660598015651, 360]
    @gpoint2scale[1] = [170.096706553637, 360]
    @gpoint2scale[2] = [128.483045527522, -124.453125]
    @gpoint2scale[3] = [73.9031654426447, -242.2265625]
    @gpoint2scale[4] = [38.0651294889721, 58.88671875]
    @gpoint2scale[5] = [19.1529343885006, 29.443359375]
    @gpoint2scale[6] = [9.59068639035872, 14.7216796875]
    @gpoint2scale[7] = [4.79709256107169, 7.36083984374999]
    @gpoint2scale[8] = [2.39876405744805, 3.68041992187499]
    @gpoint2scale[9] = [1.19937427144405, 1.8402099609375]
    @gpoint2scale[10] = [0.599690533042605, 0.92010498046875]
    @gpoint2scale[11] = [0.299845691158907, 0.460052490234361]
    @gpoint2scale[12] = [0.149923444820949, 0.230026245117159]
    @gpoint2scale[13] = [0.0749617290455404, 0.115013122558594]
    @gpoint2scale[14] = [0.037480865352201, 0.0575065612792969]
    @gpoint2scale[15] = [0.0187404242459763, 0.02875328063962]
    @gpoint2scale[16] = [0.00937021426939566, 0.0143766403197958]
    @gpoint2scale[17] = [0.00468510713633208, 0.00718832015991211]    
  end

  def init_icons(page, color, count)
    icons=[]
    1.upto(count) do |i| 
      icon = Variable.new("icon_#{color}#{i}") 
      icons << icon
      page << icon if page
    end
    icons
  end

  def init_color_icons(page)
    
    color2icons = {}
    icon_blank = Variable.new("icon_blank");            
    page << icon_blank if page
    color2icons[:blank] = icon_blank
    
    icons_red = init_icons(page, 'red', 50)
    color2icons[:red] = icons_red
    icons_blue = init_icons(page, 'blue', 50)
    color2icons[:blue] = icons_blue
    icons_green = init_icons(page, 'green', 50)
    color2icons[:green] = icons_green
    icons_yellow = init_icons(page, 'yellow', 50)
    color2icons[:yellow] = icons_yellow
    
    color2icons  
  end
  

  def get_icon(color2icons, rank, api)
    
    icons_red = color2icons[:red]
    icons_blue = color2icons[:blue]
    icons_green = color2icons[:green]
    icons_yellow = color2icons[:yellow]
    icon_blank = color2icons[:blank]
    
    if api
      icon = icons_yellow[rank-1] if api < 700
      icon = icons_green[rank-1] if api >=700 and api <800
      icon = icons_blue[rank-1] if api >=800 and api <900
      icon = icons_red[rank-1] if api >=900
    else
      icon = icon_blank # no api score 
    end  
    icon
  end

  def find_geo_center(geopoints)
    
    return @map_center if geopoints.size == 0 
    
    geo_count=0
    sum_lat=0.0; sum_lng=0.0
    for latlng in geopoints
        #puts "#{latlng[:lat]}, #{latlng[:lng]}"
      if latlng[:lat]!=0 and latlng[:lng]!=0 
        sum_lat += latlng[:lat].to_f
        sum_lng += latlng[:lng].to_f
        geo_count += 1
      end  
    end
    
    if geo_count==0
      [0.0, 0.0] 
    else  
      [sum_lat/geo_count, sum_lng/geo_count]    
    end
  end


  def find_scale_level(geopoints)

    scale_level=9  # default level
    return scale_level if geopoints.size == 0

    get_gscale_range

    lats=[]; lngs=[]
    for latlng in geopoints
      if latlng[:lat]!=0 and latlng[:lng]!=0 
        #puts "#{latlng[:lat]}, #{latlng[:lng]}"
        lats << latlng[:lat]
        lngs << latlng[:lng]
      end  
    end
    
    lat_diff = lats.max - lats.min
    lng_diff = lngs.max - lngs.min
      
    0.upto(13) do |i|  # Will be too close from 11 to 17
      (boundary_lat, boundary_lng) = @gpoint2scale[i]
      break if (boundary_lat-lat_diff<0 and boundary_lng-lng_diff<0)
      scale_level = i
    end  
    scale_level
  end

  def draw_legend(page)
    html = "<br />"
    html += "<img width=10 height=16 src='#{@app_base}/images/icons/0-99/blank.png'><font size='-2'>No API score</font>, "
    html += "<img width=10 height=16 src='#{@app_base}/images/icons/markers/largeTDYellowIcons/blank.png'><font size='-2'>API&#60;700</font>, "
    html += "<img width=10 height=16 src='#{@app_base}/images/icons/markers/largeTDGreenIcons/blank.png'><font size='-2'>700&#60;API&#60;800</font>, "
    html += "<img width=10 height=16 src='#{@app_base}/images/icons/markers/largeTDBlueIcons/blank.png'><font size='-2'>800&#60;API&#60;900</font>, "
    html += "<img width=10 height=16 src='#{@app_base}/images/icons/markers/largeTDRedIcons/blank.png'><font size='-2'>API>900</font>" 

    if page
      page['legend_ajax'].replace_html(html) 
    else  
      html
    end

  end

end
